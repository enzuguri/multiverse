{
  "name": "http-auth",
  "description": "Node.js package for HTTP basic and digest access authentication.",
  "version": "2.0.4",
  "author": {
    "name": "Gevorg Harutyunyan",
    "url": "http://github.com/gevorg"
  },
  "maintainers": [
    {
      "name": "gevorg",
      "email": "gevorg.ha@gmail.com"
    }
  ],
  "homepage": "http://github.com/gevorg/http-auth",
  "repository": {
    "type": "git",
    "url": "http://github.com/gevorg/http-auth.git"
  },
  "main": "./lib/http-auth.js",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/gevorg/http-auth/blob/master/LICENSE"
    }
  ],
  "bugs": {
    "url": "http://github.com/gevorg/http-auth/issues"
  },
  "dependencies": {
    "coffee-script": "1.6.3",
    "node-uuid": "1.4.1"
  },
  "devDependencies": {
    "nodeunit": "0.8.1",
    "express": "3.3.8",
    "http-proxy": "0.10.3",
    "request": "2.27.0"
  },
  "engines": {
    "node": ">=0.4.1"
  },
  "scripts": {
    "test": "./node_modules/nodeunit/bin/nodeunit tests/*"
  },
  "keywords": [
    "node",
    "http",
    "server",
    "basic",
    "digest",
    "access",
    "authentication"
  ],
  "readme": "# http-auth\n[Node.js](http://nodejs.org/) package for HTTP basic and digest access authentication.\n\n[![Build Status](https://api.travis-ci.org/gevorg/http-auth.png)](https://travis-ci.org/gevorg/http-auth)\n[![Dependency Status](https://david-dm.org/gevorg/http-auth.png)](https://david-dm.org/gevorg/http-auth)\n\n## Installation\n\nVia git (or downloaded tarball):\n\n```bash\n$ git clone git://github.com/gevorg/http-auth.git\n```\nVia [npm](http://npmjs.org/):\n\n```bash\n$ npm install http-auth\n```\t\n\n## Basic example\n```javascript\n// Authentication module.\nvar auth = require('http-auth');\nvar basic = auth.basic({\n\trealm: \"Simon Area.\",\n\tfile: __dirname + \"/../data/users.htpasswd\" // gevorg:gpass, Sarah:testpass ...\n});\n\n// Creating new HTTP server.\nhttp.createServer(basic, function(req, res) {\n\tres.end(\"Welcome to private area - \" + req.user + \"!\");\n}).listen(1337);\n\n```\n## Custom authentication function\n```javascript\t\n// Authentication module.\nvar auth = require('http-auth');\nvar basic = auth.basic({\n\t\trealm: \"Simon Area.\"\n\t}, function (username, password, callback) { // Custom authentication method.\n\t\tcallback(username === \"Tina\" && password === \"Bullock\");\n\t}\n);\n\n// Creating new HTTP server.\nhttp.createServer(basic, function(req, res) {\n\tres.end(\"Welcome to private area - \" + req.user + \"!\");\n}).listen(1337);\n```\t\n## [express framework](http://expressjs.com/) integration\n```javascript\n// Authentication module.\nvar auth = require('http-auth');\nvar basic = auth.basic({\n\trealm: \"Simon Area.\",\n\tfile: __dirname + \"/../data/users.htpasswd\" // gevorg:gpass, Sarah:testpass ...\n});\n\n// Application setup.\nvar app = express();\napp.use(auth.connect(basic));\n\n// Setup route.\napp.get('/', function(req, res){\n  res.send(\"Hello from express - \" + req.user + \"!\");\n});\n```\n## [http-proxy](https://github.com/nodejitsu/node-http-proxy/) integration\n```javascript\n// Authentication module.\nvar auth = require('http-auth');\nvar basic = auth.basic({\n\trealm: \"Simon Area.\",\n\tfile: __dirname + \"/../data/users.htpasswd\" // gevorg:gpass, Sarah:testpass ...\n});\n\n// Create your proxy server.\nhttpProxy.createServer(basic, 1338, \"127.0.0.1\").listen(1337);\n\n// Create your target server.\nhttp.createServer(function (req, res) {\n\tres.end(\"Request successfully proxied!\");\n}).listen(1338);\n```\n## Configurations\n\n - `realm` - Authentication realm.\n - `file` - File where user details are stored.\n \t- Line format is **{user:pass}** or **{user:passHash}** for basic access. \n \t- Line format is **{user:realm:passHash}** for digest access.\n - `algorithm` - Algorithm that will be used only for **digest** access authentication.\n \t- **MD5** by default.\n \t- **MD5-sess** can be set.\n - `qop` - Quality of protection that is used only for **digest** access authentication.\n \t- **auth** is set by default.\n \t- **none** this option is disabling protection.\n\n## Running tests\n\nIt uses [nodeunit](https://github.com/caolan/nodeunit/), so just run following command in package directory:\n\n```bash\n$ npm test\n```\n\n## Issues\n\nYou can find list of issues using **[this link](http://github.com/gevorg/http-auth/issues)**.\n\n## Requirements\n\n - **[Node.js](http://nodejs.org)** - Event-driven I/O server-side JavaScript environment based on V8.\n - **[npm](http://npmjs.org)** - Package manager. Installs, publishes and manages node programs.\n\n## Utilities\n\n - **[htpasswd](https://github.com/gevorg/htpasswd/)** - Node.js package for HTTP Basic Authentication password file utility.\n - **[htdigest](https://github.com/gevorg/htdigest/)** - Node.js package for HTTP Digest Authentication password file utility.\n\n## Dependencies\n\n - **[coffee-script](http://coffeescript.org/)** - CoffeeScript is a little language that compiles into JavaScript.\n - **[node-uuid](https://github.com/broofa/node-uuid/)** - Generate RFC4122(v4) UUIDs, and also non-RFC compact ids.\n\n## Development dependencies\n\n - **[nodeunit](https://github.com/caolan/nodeunit/)** - Easy unit testing in node.js and the browser, based on the assert module.\n - **[express](http://expressjs.com/)** - Sinatra inspired web development framework for node.js -- insanely fast, flexible, and simple.\n - **[http-proxy](https://github.com/nodejitsu/node-http-proxy/)** - A full-featured http proxy for node.js.\n - **[request](https://github.com/mikeal/request/)** - Simplified HTTP request client.\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2013 Gevorg Harutyunyan <gevorg.ha@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the **Software**), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED **AS IS**, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "http-auth@2.0.4",
  "dist": {
    "shasum": "4cad725d8eef9d1d97b1efcad2eafbe0b081ba73"
  },
  "_from": "http-auth@*",
  "_resolved": "https://registry.npmjs.org/http-auth/-/http-auth-2.0.4.tgz"
}
